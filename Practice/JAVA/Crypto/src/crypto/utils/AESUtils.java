package crypto.utils;

import java.nio.charset.StandardCharsets;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import crypto.CryptoConstants;

/**
 * AES Generate keys, get Cipher, Encrypt/Decrypt
 * 
 * @author benbai123
 *
 */
public class AESUtils {
	/**
	 * Get AES Key
	 * 
	 * @param size int, Key length, should be 128, 192, 256 if
	 * you do not use extra key derivation function or algorithms that
	 * allow different key length
	 * 
	 * @return
	 * @throws Exception
	 */
	public static char[] generateKey (int size) throws Exception {
		KeyGenerator keyGen = KeyGenerator.getInstance(CryptoConstants.AES.v);
		keyGen.init(size);
		SecretKey secretKey = keyGen.generateKey();
		byte[] encodedKey = secretKey.getEncoded();

		return CryptoUtils.bytesToBase64Chars(encodedKey);
	}

	/**
	 * Encrypt with provided Cipher
	 * 
	 * @param encCipher
	 * @param data
	 * @return
	 * @throws Exception
	 */
	public static String encrypt (Cipher encCipher, String data) throws Exception {
		// get bytes from original data
		byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);
		// Encrypt data
		// Cipher will reset its state each time the doFinal is called
		// so can be reused
		byte[] encryptedDataBytes = encCipher.doFinal( dataBytes );
		// return Encrypted bytes as Base64 String
		return CryptoUtils.bytesToBase64String(encryptedDataBytes);
	}
	/**
	 * Decrypt with provided Cipher
	 * 
	 * @param decCipher
	 * @param encryptedData
	 * @return
	 * @throws Exception
	 */
	public static String decrypt (Cipher decCipher, String encryptedData) throws Exception {
		// get bytes from Encrypted data
		byte[] encryptedDataBytes = CryptoUtils.base64StringToBytes(encryptedData);
		// Decrypt it
		// Cipher will reset its state each time the doFinal is called
		// so can be reused
		byte[] dataBytes = decCipher.doFinal( encryptedDataBytes );
		// return String Constructed from dataBytes
		return new String(dataBytes, StandardCharsets.UTF_8);
	}
	/**
	 * Get Cipher with specified Key
	 * 
	 * @param mode Cipher.ENCRYPT_MODE (1) or Cipher.DECRYPT_MODE (2)
	 * @param key AES Key, should be generated by AESUtils.generateKey
	 * with size 128/192/256
	 * 
	 * @return
	 * @throws Exception
	 */
	public static Cipher getCipher (int mode, char[] key) throws Exception {
		byte[] keyBytes = CryptoUtils.base64CharsToBytes(key);
		byte[] ivBytes = CryptoUtils.md5(keyBytes);
		SecretKeySpec skeySpec = new SecretKeySpec(keyBytes, CryptoConstants.AES.v);
		IvParameterSpec iv = new IvParameterSpec(ivBytes);
		
		Cipher cipher = Cipher.getInstance(CryptoConstants.AES_CBC_PKCS5PADDING.v);
		cipher.init(mode, skeySpec, iv);
		return cipher;
	}
}
